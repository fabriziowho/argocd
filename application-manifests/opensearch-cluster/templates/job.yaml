apiVersion: batch/v1
kind: Job
metadata:
  name: config-sync
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      containers:
        - name: config-sync
          image: bash:latest
          args:
            - -c
            - |
              function main() {
                apk add curl jq yq

                CURLPARAMS="--user ${OPENSEARCH_USER}:${OPENSEARCH_PASSWORD} --fail --silent --cacert /ssl/opensearch-ca.crt"
                BASEURL="https://opensearch-cluster:9200"

                cd /ilm
                for policy in $(ls -1); do
                  POLICY_NAME=$(basename "$policy" .yaml)
                  REMOTE_POLICY="$(curl $CURLPARAMS --request GET "${BASEURL}/_plugins/_ism/policies/${POLICY_NAME}" || :)"
                  LOCAL_POLICY=$(cat $policy | yq -o=json | jq --raw-output --compact-output '.policy | del(.schema_version) | .description = .description + (if .description == "" then "" else ". " end) + "Source of truth: https://gitlab.senec.com/operations/k8s/argocd_ops_product_logging/-/tree/master/application-manifests/opensearch-cluster/config"')

                  if [ -z "$REMOTE_POLICY" ]; then
                    echo "Policy \"${POLICY_NAME}\" does not exist, creating it"

                    echo "$LOCAL_POLICY" | jq '{"policy": .}' | curl $CURLPARAMS --output /dev/null \
                      --request PUT \
                      --header "Content-Type: application/json" \
                      "${BASEURL}/_plugins/_ism/policies/${POLICY_NAME}" \
                      --data-binary '@-'
                  else
                    echo "Policy \"${POLICY_NAME}\" exists, checking if it needs to be updated"

                    REMOTE_POLICY_CLEAN=$(
                      echo $REMOTE_POLICY |
                        jq --raw-output --compact-output \
                          '.policy
                          | del(.policy_id, .schema_version)
                          | if .error_notification == null then del(.error_notification) else . end
                          | if .ism_template == null then del(.ism_template) else . end
                          | walk(if type == "object" then with_entries(select(.key | test("last_updated_time") | not)) else . end)'
                    )

                    if [ "$LOCAL_POLICY" == "$REMOTE_POLICY_CLEAN" ]; then
                      echo "Policy \"${POLICY_NAME}\" is up to date"
                    else
                      echo "Updating policy \"${POLICY_NAME}\""

                      SEQ_NO="$(echo $REMOTE_POLICY | jq --raw-output --compact-output ._seq_no)"
                      PRIMARY_TERM="$(echo $REMOTE_POLICY | jq --raw-output --compact-output ._primary_term)"

                      echo "$LOCAL_POLICY" | jq '{"policy": .}' | curl $CURLPARAMS --output /dev/null \
                        --request PUT \
                        --header "Content-Type: application/json" \
                        "${BASEURL}/_plugins/_ism/policies/${POLICY_NAME}?if_seq_no=${SEQ_NO}&if_primary_term=${PRIMARY_TERM}" \
                        --data-binary '@-'
                    fi
                  fi
                done

                cd /indextemplates
                for indextemplate in $(ls -1); do
                  INDEXTEMPLATE_NAME=$(basename "$indextemplate" .yaml)
                  echo "Syncing Indextemplate \"${INDEXTEMPLATE_NAME}\""
                  yq -o=json "$indextemplate" | jq --raw-output --compact-output '._meta.description = "Source of truth: https://gitlab.senec.com/operations/k8s/argocd_ops_product_logging/-/tree/master/application-manifests/opensearch-cluster/config"' | curl $CURLPARAMS --output /dev/null \
                    --request PUT \
                    "${BASEURL}/_index_template/${INDEXTEMPLATE_NAME}" \
                    --header "Content-Type: application/json" \
                    --data-binary '@-'

                  # Ensure alias is initialized.
                  # https://opensearch.org/docs/latest/im-plugin/ism/policies/#sample-policy-with-ism-template-for-auto-rollover
                  alias_name="$(yq '.template.settings.["plugins.index_state_management.rollover_alias"]' $indextemplate)"
                  curl $CURLPARAMS --output /dev/null \
                    --head \
                    "${BASEURL}/${alias_name}" || ( \
                      echo "Alias \"${alias_name}\" does not exist, creating it"; \
                      curl $CURLPARAMS --output /dev/null \
                        --request PUT \
                        "${BASEURL}/{$alias_name}-000001" \
                        --header "Content-Type: application/json" \
                        --data "{\"aliases\": { \"${alias_name}\": { \"is_write_index\": true } } }")
                done

                cd /roles
                for role in $(ls -1); do
                  ROLE_NAME=$(basename "$role" .yaml)
                  echo "Syncing Role \"${ROLE_NAME}\""
                  curl $CURLPARAMS --output /dev/null \
                    --request PUT \
                    "${BASEURL}/_plugins/_security/api/roles/${ROLE_NAME}" \
                    --header "Content-Type: application/json" \
                    --data "$(cat $role | yq -o=json)"
                done

                cd /rolesmapping
                for rolemapping in $(ls -1); do
                  ROLEMAPPING_NAME=$(basename "$rolemapping" .yaml)
                  echo "Syncing RoleMapping \"${ROLEMAPPING_NAME}\""
                  curl $CURLPARAMS --output /dev/null \
                    --request PUT \
                    "${BASEURL}/_plugins/_security/api/rolesmapping/${ROLEMAPPING_NAME}" \
                    --header "Content-Type: application/json" \
                    --data "$(cat $rolemapping | yq -o=json)"
                done
              }

              PS4='+ $(date -Iminutes), ${BASH_SOURCE-}:${LINENO-}: '
              export PS4
              trap 'echo Encountered an unexpected error. Exiting with exit code $? in ${BASH_SOURCE-}:${LINENO-}. >&2' ERR
              set -o nounset -o pipefail -o errexit -o errtrace

              main "$@"
          env:
            - name: OPENSEARCH_USER
              value: admin
            - name: OPENSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-secret
                  key: password
          volumeMounts:
            - mountPath: /ssl/opensearch-ca.crt
              name: opensearch-ca
              readOnly: true
              subPath: ca.crt
            - name: ilm-config
              mountPath: /ilm
            - name: roles-config
              mountPath: /roles
            - name: rolesmapping-config
              mountPath: /rolesmapping
            - name: indextemplates-config
              mountPath: /indextemplates
      volumes:
        - name: opensearch-ca
          secret:
            secretName: opensearch-cluster-ca
        - name: ilm-config
          configMap:
            name: ilm-config
        - name: roles-config
          configMap:
            name: roles-config
        - name: rolesmapping-config
          configMap:
            name: rolesmapping-config
        - name: indextemplates-config
          configMap:
            name: indextemplates-config
      restartPolicy: Never
